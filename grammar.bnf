/* ------------------------------------------------------------------------------------------------------------------ */
/*    _____  __              __ __                                                                                    */
/*   |     \|__|.-----.----.|__|  |_.-----.                                                                           */
/*   |  --  |  ||  _  |   _||  |   _|  -__|                                                                           */
/*   |_____/|__||_____|__|  |__|____|_____|                                                                           */
/*                                                                                                                    */
/* ------------------------------------------------------------------------------------------------------------------ */
/* This is the language specification for the Diorite mathematics language.                                           */
/* Whitespace is implied by this specification, unless enforced by specific BNF rules.                                */
/* ------------------------------------------------------------------------------------------------------------------ */
/* Operator Precedence:                                                                                               */
/* Binary operators (+, -, *, /, ^) are parsed in the order of: [+, -], [*, /], and ^.                                */
/* Unary operators (+, -, !) are parsed in the order of: [+, -] and !.                                                */
/* Precedence order: b[+, -], [*, /], u[+, -], ^, and !.                                                              */
/* ------------------------------------------------------------------------------------------------------------------ */
/* This .bnf file was generated using BNF Playground: https://bnfplayground.pauliankline.com                          */
/* Developed by James Armstrong & Aidan Barden (2025)                                                                 */
/* ------------------------------------------------------------------------------------------------------------------ */

/* Fundamentals */
<digit>          ::= [0-9]
<integer>        ::= (<digit> <integer>) | <digit>
<decimal>        ::= (<integer> "." <integer>) | ("." <integer>)

/* Value Types */
<number>         ::= <integer> | <decimal>
<complex>        ::= "i" | (<number> "i")
                  |  (<number> "+" <number> "*" "i")
                  |  (<number> "+" <number> "i")
                  |  (<number> "+" "i")
<variable>       ::= [a-z] | [A-Z]
<value>          ::= "undefined"
                  |  <number>
                  |  <variable>
                  |  <invocation>
                  |  ("(" <exponentiation> ")")
                  |  ("|" <exponentiation> "|")

/* Function Conditionals */
<eq>             ::= "=" | "!="
<neq>            ::= "<" | ">" | "<=" | ">="
<equality>       ::= <exponentiation> <eq> <exponentiation>
<inequality>     ::= (<exponentiation> <neq> <exponentiation>)
                  |  (<exponentiation> <neq> <exponentiation> <neq> <exponentiation>)
<condition>      ::= <equality> | <inequality> | ("(" <equality> ")") | ("(" <inequality> ")")
<if>             ::= <exponentiation> "if" <condition>
<else>           ::= <exponentiation> "otherwise"
<conditional>    ::= (<if> "," <conditional>) | (<if> "," <else>)

/* Function Declarations */
<params>         ::= (<params> "," <value>) | <value>
<function>       ::= <variable> "(" <params> ")"
<body>           ::= <exponentiation> | ("{" <conditional> "}")
<definition>     ::= <function> "=" <body>

/* Function Invocations */
<args>           ::= (<args> "," <value>) | <value>
<invocation>     ::= <variable> "(" <args> ")"

/* Unary Operations */
<signed>         ::= (("+" | "-") <signed>) | <value>
<factorial>      ::= (<factorial> "!") | <signed>

/* Binary Operations */
<arithmetic>     ::= (<arithmetic> ("+" | "-") <factorial>) | <factorial>
<multiplication> ::= (<multiplication> ("*" | "/" | "%") <arithmetic>) | <multiplication> <arithmetic> | <arithmetic>
<exponentiation> ::= (<multiplication> "^" <exponentiation>) | <multiplication>

/* Expressions & Equations */
<equation>       ::= <definition> | <exponentiation> | (<exponentiation> "=" <exponentiation>)

/* ------------------------------------------------------------------------------------------------------------------ */
/* Fibonacci Example:                                                                                                 */
/* f(x) = {                                                                                                           */
/*   undefined if x < 0,                                                                                              */
/*   0 if x = 0,                                                                                                      */
/*   1 if x = 1,                                                                                                      */
/*   f(x - 2) + f(x - 1)) otherwise                                                                                   */
/* }                                                                                                                  */
/* ------------------------------------------------------------------------------------------------------------------ */
/* BNF Interpretation:                                                                                                */
/* f(x)={(undefined)if(x<0),(0)if(x=0),(1)if(x=1),(f(x-2)+f(x-1))otherwise}                                           */
/* (Brackets included for clarity).                                                                                   */
/* ------------------------------------------------------------------------------------------------------------------ */
/* Developed by James Armstrong & Aidan Barden (2025)                                                                 */
/* ------------------------------------------------------------------------------------------------------------------ */
